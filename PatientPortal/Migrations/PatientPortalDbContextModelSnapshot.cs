// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientPortal.Data;
#nullable disable
namespace PatientPortal.Migrations
{
    [DbContext(typeof(PatientPortalDbContext))]
    partial class PatientPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);
            modelBuilder.Entity("PatientPortal.Models.DomainModels.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");
                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.ToTable("Admins");
                });
            modelBuilder.Entity("PatientPortal.Models.DomainModels.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");
                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");
                    b.HasKey("Id");
                    b.HasIndex("PatientId");
                    b.ToTable("Appointments");
                });
            modelBuilder.Entity("PatientPortal.Models.DomainModels.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");
                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");
                    b.HasKey("Id");
                    b.ToTable("Patients");
                });
            modelBuilder.Entity("PatientPortal.Models.DomainModels.Appointment", b =>
                {
                    b.HasOne("PatientPortal.Models.DomainModels.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                    b.Navigation("Patient");
                });
            modelBuilder.Entity("PatientPortal.Models.DomainModels.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
